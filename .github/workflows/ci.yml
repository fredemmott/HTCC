name: Continuous Integration
on:
  push:
    paths-ignore:
      - 'docs/**'
      - '.github/workflows/pages.yml'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '.github/workflows/pages.yml'
jobs:
  build:
    name: ${{matrix.preset}}
    runs-on: windows-latest
    strategy:
      matrix:
        preset:
          - Debug
          - Debug - clang-cl
          - Release
    env:
      VCPKG_DEFAULT_BINARY_CACHE: ${{github.workspace}}/.vcpkg-binary-cache
    steps:
      - name: Set up visual studio environment
        shell: pwsh
        run: |
          $VSRoot = $(
            vswhere `
              -latest `
              -products * `
              -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 `
              -property installationPath)
          cmd /c "`"${VSRoot}/VC/Auxiliary/Build/vcvarsall.bat`" x64&set" `
            | Where-Object { $_ -like '*=*' } `
            | Out-File -Encoding utf8 -Append $Env:GITHUB_ENV
      - uses: actions/checkout@v4
        with:
          path: source
          fetch-depth: 0
          submodules: true
      - name: Make build directory
        run: cmake -E make_directory build
      - name: Setup vcpkg binary cache
        uses: actions/cache@v4
        with:
          key: ${{matrix.preset}}-${{hashFiles('source/vcpkg.json')}}
          path: ${{env.VCPKG_DEFAULT_BINARY_CACHE}}
      - name: Configure
        working-directory: build
        shell: pwsh
        run: |
          cmake -E make_directory "${{env.VCPKG_DEFAULT_BINARY_CACHE}}"
          $args = @(
            "-DGITHUB_REF_TYPE=${{github.ref_type}}",
            "-DGITHUB_REF_NAME=${{github.ref_name}}"
          )
          cmake `
            ${{github.workspace}}/source `
            --preset "${{matrix.preset}}" `
            @args
      - name: Build
        id: build
        working-directory: build
        run: |
          cmake --build . `
            --parallel
          $version="$(Get-Content version.txt)"
          Add-Content $Env:GITHUB_OUTPUT "VERSION=${version}"
      - name: Install debug symbols
        id: symbols
        working-directory: build
        run: |
          $prefix="${{runner.temp}}/symbols-inst"
          cmake --install . `
            --prefix $prefix `
            --component DebugSymbols
          Add-Content $Env:GITHUB_OUTPUT "PATH=$prefix"
          echo "::group::Make zip"
          $zip = "${{runner.temp}}/DebugSymbols.zip"
          cd $prefix
          Compress-Archive `
            -Path *.pdb `
            -DestinationPath $zip
          Add-Content $Env:GITHUB_OUTPUT "ZIP_PATH=$zip"
          echo "::endgroup::"
      - name: Generate release notes
        id: release-notes
        run: |
          $out = "${{runner.temp}}/release_notes.md"
          (Get-Content -Path source/.github/workflows/release_notes.md -raw) `
            -replace '@TAG@','${{github.ref_name}}' | `
            Set-Content -Path $out -Encoding UTF8
          Add-Content $Env:GITHUB_OUTPUT "PATH=$out"
      - name: Create draft release
        if: github.ref_type == 'tag' && matrix.preset == 'Release'
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: Release ${{github.ref_name}}
          tag_name: ${{github.ref_name}}
          draft: true
          body_path: ${{steps.release-notes.outputs.PATH}}
